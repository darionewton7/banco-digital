// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CustomButton /> renders correctly when disabled 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#6c757d",
      "borderRadius": 8,
      "justifyContent": "center",
      "marginBottom": 16,
      "minHeight": 48,
      "opacity": 0.6,
      "paddingHorizontal": 20,
      "paddingVertical": 12,
    }
  }
>
  <Text
    style={
      [
        {
          "color": "#ffffff",
          "fontSize": 16,
          "fontWeight": "bold",
        },
        undefined,
      ]
    }
  >
    Disabled Button
  </Text>
</View>
`;

exports[`<CustomButton /> renders correctly when loading 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#0056b3",
      "borderRadius": 8,
      "justifyContent": "center",
      "marginBottom": 16,
      "minHeight": 48,
      "opacity": 1,
      "paddingHorizontal": 20,
      "paddingVertical": 12,
    }
  }
>
  <ActivityIndicator
    color="#ffffff"
  />
</View>
`;

exports[`<CustomButton /> renders correctly with danger variant 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#dc3545",
      "borderRadius": 8,
      "justifyContent": "center",
      "marginBottom": 16,
      "minHeight": 48,
      "opacity": 1,
      "paddingHorizontal": 20,
      "paddingVertical": 12,
    }
  }
>
  <Text
    style={
      [
        {
          "color": "#ffffff",
          "fontSize": 16,
          "fontWeight": "bold",
        },
        undefined,
      ]
    }
  >
    Danger Button
  </Text>
</View>
`;

exports[`<CustomButton /> renders correctly with default props 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#0056b3",
      "borderRadius": 8,
      "justifyContent": "center",
      "marginBottom": 16,
      "minHeight": 48,
      "opacity": 1,
      "paddingHorizontal": 20,
      "paddingVertical": 12,
    }
  }
>
  <Text
    style={
      [
        {
          "color": "#ffffff",
          "fontSize": 16,
          "fontWeight": "bold",
        },
        undefined,
      ]
    }
  >
    Test Button
  </Text>
</View>
`;

exports[`<CustomButton /> renders correctly with secondary variant 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "alignItems": "center",
      "backgroundColor": "#6c757d",
      "borderRadius": 8,
      "justifyContent": "center",
      "marginBottom": 16,
      "minHeight": 48,
      "opacity": 1,
      "paddingHorizontal": 20,
      "paddingVertical": 12,
    }
  }
>
  <Text
    style={
      [
        {
          "color": "#ffffff",
          "fontSize": 16,
          "fontWeight": "bold",
        },
        undefined,
      ]
    }
  >
    Secondary Button
  </Text>
</View>
`;
